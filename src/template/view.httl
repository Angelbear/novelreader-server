<!--#set(Book book) -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport"
	content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" />
<script
	src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<link href="/static/css/monocore.css" rel="stylesheet" type="text/css" />
<link href="/static/css/monoctrl.css" rel="stylesheet" type="text/css" />
<link href="/static/css/page.css" rel="stylesheet" type="text/css" />
<script src="/static/js/monocore.js"></script>
<script src="/static/js/monoctrl.js"></script>
<style type="text/css">
.textData {
	display: none;
}
</style>
<script type="text/javascript">
      Monocle.DEBUG = true;

      Monocle.Styles.container.right = "24px";
      
      var bookData = {
        getComponents: function () {
          return [
			<!--#for(SectionView sec : book.sections) -->
				'${sec.id}',
            <!--#end-->
          ];
        },
        getContents: function () {
          return [
			<!--#for(SectionView sec : book.sections) -->
			{
			    title: "${sec.title}",
			    src: '${sec.id}'
			  },
			<!--#end-->
          ]
        },
        getComponent: function (cmptId) {
          var key = "section-" + cmptId;
          console.log("get "+ key);
          return { nodes: [document.getElementById(key).cloneNode(true)] };
        },
        getMetaData: function(key) {
          return {
            title: "${book.name}",
            creator: "${book.name}"
          }[key];
        }
      }


      function createBookTitle(reader, contactListeners) {
        var bt = {}
        bt.createControlElements = function () {
          cntr = document.createElement('div');
          cntr.className = "bookTitle";
          runner = document.createElement('div');
          runner.className = "runner";
          runner.innerHTML = reader.getBook().getMetaData('title');
          cntr.appendChild(runner);
          if (contactListeners) {
            Monocle.Events.listenForContact(cntr, contactListeners);
          }
          return cntr;
        }
        reader.addControl(bt, 'page');
        return bt;
      }

      function jumpPage() {
    		var event = document.all ? window.event : arguments[0];
    	  if (event.keyCode==39) {
        	  window.reader.moveTo( { page : window.reader.getPlace().pageNumber() + 1 } );
          }
    	  if (event.keyCode==37) {
    		  window.reader.moveTo( { page : window.reader.getPlace().pageNumber() - 1 } );
          }
    	}

      function load_section(section_id, force_update, callback) {
    	  force_update = force_update || 0;
    	  callback = callback || function (fetched) {};
    	  var need_sync = 0;
    	  if ($("#section-" + section_id).length > 0) {
    		  if ($("#section-" + section_id).attr('sync') == '0') {
    			  need_sync = 1;
        	  }
          }
    	  if (need_sync == 1 || force_update == 1) {
        	  console.log(section_id);
	    	   $.getJSON("/view/section?section_id="+ section_id, function(data) {
	                var section = data;
	                var html = "<div id=\"section-" + section_id + "\" class=\"textData\" sync=\"1\"><h3>" + section.title + "</h3><p>" + section.text + "</p></div>";
	                if ($("#section-" + section_id).length == 0) {
	                	 var html = "<div id=\"section-" + section_id + "\" class=\"textData\" sync=\"1\"><h3>" + section.title + "</h3><p>" + section.text + "</p></div>";
	                	 $('#section-data div:last').after(html);
	                } else {
	                	 var html = "<h3>" + section.title + "</h3><p>" + section.text + "</p>";
	                	 $("#section-" + section_id).attr('sync', '1');
	             	     $("#section-" + section_id).html(html);
	                }
	                callback(true);
	            });
    	  } else {
    		  callback(false);
          }
      }
    	document.onkeydown=jumpPage;

      // Initialize the reader element.
      Monocle.Events.listen(
        window,
        'load',
        function () {
          var readerOptions = {
            panels: Monocle.Panels.Magic,
            flipper: Monocle.Flippers.Slider,
            stylesheet : 'body { font-family: 宋体, 新细明体, Verdana, Arial, sans-serif; font-size:20px; }'
          };

          var ids = bookData.getComponents();
          var jumpPage = null;
          if (localStorage['bookmark-${book.id}'] != null) {
            jumpPage = $.parseJSON(localStorage['bookmark-${book.id}']);
          }

          if ( ids != null) {
        	  var last_section = 0;
              if (jumpPage !=null && jumpPage.componentId != null) {
            	  last_section = $.inArray(String(jumpPage.componentId), ids);
              }
              if (last_section >= 0) {
            	  load_section(ids[last_section], 1, function() {
            		  Monocle.Reader('reader', bookData, readerOptions, function (rdr) {
            	            window.reader = rdr;

            	            /* SPINNER */
            	            var spinner = Monocle.Controls.Spinner(rdr);
            	            rdr.addControl(spinner, 'page', { hidden: true });
            	            spinner.listenForUsualDelays('reader');


            	            /* Because the 'reader' element changes size on window resize,
            	             * we should notify it of this event. */
            	            Monocle.Events.listen(
            	              window,
            	              'resize',
            	              function () { window.reader.resized() }
            	            );

            	            /* MAGNIFIER CONTROL */
            	            var magnifier = new Monocle.Controls.Magnifier(rdr);
            	            rdr.addControl(magnifier, 'page');

            	            /* The stencil activates internal links */
            	            var stencil = new Monocle.Controls.Stencil(rdr);
            	            rdr.addControl(stencil);
            	            //stencil.toggleHighlights();

            	            /* PAGE NUMBER RUNNING HEAD */
					          var pageNumber = {
					            runners: [],
					            createControlElements: function (page) {
					              var cntr = document.createElement('div');
					              cntr.className = "pageNumber";
					              var runner = document.createElement('div');
					              runner.className = "runner";
					              cntr.appendChild(runner);
					              this.runners.push(runner);
					              this.update(page, page.m.place.pageNumber());
					              return cntr;
					            },
					            update: function (page, pageNumber) {
					              if (pageNumber) {
					                this.runners[page.m.pageIndex].innerHTML = pageNumber;
					              }
					            }
					          }
					          rdr.addControl(pageNumber, 'page');
					          rdr.listen(
					            'monocle:pagechange',
					            function (evt) {
					              pageNumber.update(evt.m.page, evt.m.pageNumber);
					            }
					          );
					            	            
            	            
            	            Monocle.Events.listen('reader', 'monocle:loaded', function(evt) {
            	                if (window.localStorage['bookmark-${book.id}'] != null) {
            	                    var jumpPage = $.parseJSON(localStorage['bookmark-${book.id}']);
            	                    if (jumpPage != null) {
            	                    	window.reader.moveTo( jumpPage );
            	                    }
            	                }
            	                Monocle.Events.listen('reader', 'monocle:pagechange', function(evt) {
            	                	window.localStorage['bookmark-${book.id}'] = JSON.stringify(window.reader.getPlace().getLocus());
            	                });

            	                Monocle.Events.listen('reader', 'monocle:turn', function() {
            	                	var ids = bookData.getComponents();
            	                	var locus = window.reader.getPlace().getLocus();
            	                	if ( ids != null && locus != null) {
            	                   	  var last_section = $.inArray(String(locus.componentId), ids);
            	                      if (last_section >= 0) {
            		                       var total_sections = ids.length;
            		                       for(var i = 0; i < 10; i++) {
            		                     	  last_section = (last_section + i) % total_sections;
            		                     	  load_section(ids[last_section], 0, function(fetched) {
                		                     	  if (fetched) {
                    		                      }
                		                     });
            		                       }
            	                      }
            	                    }
            	                });
            	            });
            	            
            	            var reader = Monocle.Controls.Contents(rdr);
            	            rdr.addControl(reader, 'popover', { hidden: true });
            	            createBookTitle(
            	              rdr,
            	              {
            	                start: function () {
            	                  rdr.showControl(reader);
            	                }
            	              }
            	            );
            	          });
                  });
              }
          }
        }
      );
    </script>

</head>

<body>
	<div id="readerBg">
		<div class="board"></div>
		<div class="jacket"></div>
		<div class="dummyPage"></div>
		<div class="dummyPage"></div>
		<div class="dummyPage"></div>
		<div class="dummyPage"></div>
		<div class="dummyPage"></div>
	</div>
	<div class="readerCntr">
		<div class="reader" id="reader"></div>
	</div>
	<div id="section-data">
		<!--#for(SectionView sec : book.sections) -->
		<div id="section-${sec.id}" class="textData" sync="0">
			<h3>${sec.title}</h3>
			<p></p>
		</div>
		<!--#end-->
	</div>
</body>


</html>